generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String?
  imageUrl    String?   // From teammates - user profile pictures
  isArtist    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  description String    @default("")
  products    Product[]
  reviews     Review[]  // Your review system
  accounts    Account[]
  sessions    Session[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String?
  price       Float
  artistId    String
  createdAt   DateTime @default(now())
  timesViewed Int      @default(0)
  artist      User     @relation(fields: [artistId], references: [id])
  reviews     Review[] // Products can have multiple reviews
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      // 1-5 star rating
  comment   String
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}